// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantKeeperAPI.Database;

#nullable disable

namespace PlantKeeperAPI.Database.Migrations
{
    [DbContext(typeof(PlantKeeperDbContext))]
    [Migration("20240617232726_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PlantKeeperAPI.Entities.Keeper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Keepers");
                });

            modelBuilder.Entity("PlantKeeperAPI.Entities.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Care")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("Picture")
                        .HasMaxLength(2000000)
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("PlantKeeperAPI.Entities.WateringLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KeeperId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WateringMethodId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("KeeperId");

                    b.HasIndex("PlantId");

                    b.HasIndex("WateringMethodId");

                    b.ToTable("WateringLogs");
                });

            modelBuilder.Entity("PlantKeeperAPI.Entities.WateringMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("WateringMethods");
                });

            modelBuilder.Entity("PlantKeeperAPI.Entities.WateringLog", b =>
                {
                    b.HasOne("PlantKeeperAPI.Entities.Keeper", "Keeper")
                        .WithMany("WateringLogs")
                        .HasForeignKey("KeeperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantKeeperAPI.Entities.Plant", "Plant")
                        .WithMany("WateringLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantKeeperAPI.Entities.WateringMethod", "WateringMethod")
                        .WithMany("WateringLogs")
                        .HasForeignKey("WateringMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keeper");

                    b.Navigation("Plant");

                    b.Navigation("WateringMethod");
                });

            modelBuilder.Entity("PlantKeeperAPI.Entities.Keeper", b =>
                {
                    b.Navigation("WateringLogs");
                });

            modelBuilder.Entity("PlantKeeperAPI.Entities.Plant", b =>
                {
                    b.Navigation("WateringLogs");
                });

            modelBuilder.Entity("PlantKeeperAPI.Entities.WateringMethod", b =>
                {
                    b.Navigation("WateringLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
